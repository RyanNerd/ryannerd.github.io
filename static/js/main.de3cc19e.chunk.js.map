{"version":3,"sources":["components/About/AboutPage.js","components/Contributions/ContributionsPage.js","components/Frameworks/FrameworksPage.js","components/Providers/Frak.js","components/DogPage/DogPage.js","components/LandingPage/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["AboutPage","Card","style","width","Header","ListGroup","variant","Item","Text","horizontal","Button","href","className","ContributionsPage","Accordion","defaultActiveKey","Toggle","as","eventKey","Collapse","Body","FrameworksPage","active","marginTop","DEFAULT_REQUEST_CONTENT_TYPE","GET","POST","PUT","PATCH","DELETE","HEAD","OPTIONS","CONNECT","TRACE","initializeRequest","method","request","body","console","assert","includes","mode","headers","Headers","contentType","append","JSON","stringify","doFetch","url","setResponse","setError","a","fetch","res","get","replace","json","fetchData","DogPage","props","options","useState","response","error","useEffect","useGet","Spinner","animation","size","imageUrl","message","src","alt","height","LandingPage","activeTabKey","setActiveTabKey","Tabs","id","activeKey","onSelect","key","Tab","TabContent","title","App","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de3cc19e.chunk.js","sourcesContent":["import React from 'react';\nimport Card from \"react-bootstrap/Card\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./../../styles/hover_underline_animation.css\";\n\nfunction AboutPage()\n{\n    return (\n        <Card style={{ width: '40rem' }}>\n            <Card.Header>About Ryan Jentzsch</Card.Header>\n            <ListGroup variant={\"flush\"} >\n                <ListGroup.Item>\n                    <Card.Text>\n                        Over 25 years experience in IT.<br></br>\n                        I've had my fingers in almost every major language,\n                        as well as Networking and SQL experience.\n                    </Card.Text>\n                </ListGroup.Item>\n                <ListGroup horizontal variant={\"flush\"}>\n                    <ListGroup.Item><Button variant={\"link\"} href=\"mailto:ryan.jentzsch@gmail.com\" className=\"hover-underline-animation\">Contact Me</Button></ListGroup.Item>\n                    <ListGroup.Item><Button variant={\"link\"} href=\"https://github.com/RyanNerd\" className=\"hover-underline-animation\">GitHub Profile</Button></ListGroup.Item>\n                    <ListGroup.Item><Button variant={\"link\"} href=\"https://stackoverflow.com/users/4323201/ryannerd\" className=\"hover-underline-animation\">StackOverflow Reputation</Button></ListGroup.Item>\n                </ListGroup>\n            </ListGroup>\n        </Card>\n    )\n}\n\nexport default AboutPage;","import React from 'react';\nimport Card from \"react-bootstrap/Card\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./../../styles/hover_underline_animation.css\";\n\nfunction ContributionsPage()\n{\n    return (\n        <Card>\n            <Card.Header>Contributions</Card.Header>\n            <Accordion defaultActiveKey=\"0\">\n                <Card>\n                    <Card.Header>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                            Willow Framework\n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body>\n                            Willow Framework details placeholder\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n                <Card>\n                    <Card.Header>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"1\">\n                            Slim Framework\n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey=\"1\">\n                        <Card.Body>\n                            Slim Framework details placeholder\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n                <Card>\n                    <Card.Header>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"2\">\n                                <span>Linux Mint</span>\n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey=\"2\">\n                        <Card.Body>\n                            <Card.Text>\n                                Place holder\n                            </Card.Text>\n\n                            <Button variant=\"link\" href=\"https://cinnamon-spices.linuxmint.com/desklets/view/41\" className=\"hover-underline-animation\">\n                                Details\n                            </Button>\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            </Accordion>\n        </Card>\n\n    )\n}\n\nexport default ContributionsPage;","import React from \"react\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./../../styles/hover_underline_animation.css\";\nimport \"./../../styles/etched_text.css\";\n\nfunction FrameworksPage()\n{\n    return (\n        <>\n        <ListGroup as=\"ul\" style={{ width: '30rem'}}>\n            <ListGroup.Item as=\"li\" active>\n                 <b>Frameworks</b>\n            </ListGroup.Item>\n            <ListGroup.Item as=\"li\">\n                <Button variant={\"link\"} className=\"hover-underline-animation\" href=\"https://reactjs.org/\">\n                    React\n                </Button>\n            </ListGroup.Item>\n            <ListGroup.Item as=\"li\">\n                <Button variant={\"link\"} className=\"hover-underline-animation\" href=\"https://www.notion.so/ryannerd/Willow-Framework-Users-Guide-bf56317580884ccd95ed8d3889f83c72\">\n                    Willow\n                </Button>\n            </ListGroup.Item>\n            <ListGroup.Item as=\"li\">\n                <Button variant={\"link\"} className=\"hover-underline-animation\" href=\"http://www.slimframework.com/\">\n                    Slim\n                </Button>\n            </ListGroup.Item>\n        </ListGroup>\n\n\n        <ListGroup as=\"ul\" style={{ width: \"45rem\", marginTop: \"25px\"}}>\n            <ListGroup.Item as=\"li\" active>\n                <b>Languages</b>\n            </ListGroup.Item>\n            <ListGroup.Item as=\"li\">\n            <span className=\"etched-text\">\n             PHP\n            </span>\n            </ListGroup.Item>\n            <ListGroup.Item as=\"li\">\n            <span className=\"etched-text\">\n                JavaScript / TypeScript\n            </span>\n            </ListGroup.Item>\n            <ListGroup.Item as=\"li\">\n            <span className=\"etched-text\">\n                C#\n            </span>\n            </ListGroup.Item>\n            <ListGroup.Item as=\"li\">\n            <span className=\"etched-text\">\n                SQL (MySQL, Oracle, MS-SQL): T-SQL, PL/SQL\n            </span>\n            </ListGroup.Item>\n            <ListGroup.Item as=\"li\">\n            <span className=\"etched-text\">\n                Many Others (Kotlin, Dart, C, C++)\n            </span>\n            </ListGroup.Item>\n        </ListGroup>\n        </>\n    )\n}\n\nexport default FrameworksPage;","/* eslint-disable react-hooks/exhaustive-deps */\nimport {useEffect, useState} from 'react';\n\nconst JSON_CONTENT_TYPE = 'application/json';\nconst DEFAULT_REQUEST_CONTENT_TYPE =\n    {\n        GET: null, // https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET\n        POST: JSON_CONTENT_TYPE, // https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST\n        PUT:  JSON_CONTENT_TYPE, // https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT\n        PATCH: JSON_CONTENT_TYPE, // https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH\n        DELETE: null, // https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE (https://tools.ietf.org/html/rfc7231#section-4.3.5)\n        HEAD: null, // https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD\n        OPTIONS: null, // https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS\n        CONNECT: null, // https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT\n        TRACE: null // https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/TRACE\n    };\n\n/**\n * Called prior to the fetch to validate the request object and apply defaults per HTTP method (such as headers).\n *\n * @param {string} method\n * @param {object} request\n * @param {object | string} body\n * @returns {object}\n */\nconst initializeRequest = (method, request, body) => {\n    // Method must be one of the specified HTTP verbs per the HTTP spec\n    // @see: https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\n    console.assert(['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS', 'CONNECT', 'TRACE'].includes(method), 'Invalid method: ' + method);\n\n    // Do we have a request object already? If not initialize the request to default to mode: \"cors\"\n    if (!request) {\n        request = {mode: \"cors\"};\n    }\n\n    // Are there headers in the request object? If not then create a new headers property.\n    if (!request.headers) {\n        request.headers = new Headers();\n    }\n\n    // Figure out what type of Content-Type we should send.\n    let contentType = DEFAULT_REQUEST_CONTENT_TYPE[method];\n    if (contentType !== null) {\n        request.headers.append('Content-Type', contentType);\n    }\n\n    // If body is present then transform (if needed) and add it as a property to the request.\n    if (body) {\n        request.body = (typeof body) === 'object' ? JSON.stringify(body) : body;\n    }\n\n    // Prevent the method from being overridden.\n    request.method = method;\n\n    return request;\n};\n\n/**\n * Asynchronously perform the fetch\n *\n * @param {string} url\n * @param {object} request\n * @returns {Promise<void>}\n */\nconst doFetch = (url, request, setResponse, setError) => {\n    const fetchData = async () => {\n        try {\n            const res = await fetch(url, request);\n\n            // Do we have headers in the response?\n            if (typeof res.headers !== 'undefined') {\n                // Get the Content-Type header\n                let contentType = res.headers.get('Content-Type');\n\n                // In case the contentType has a backslash we convert it to forward slash\n                contentType = contentType.replace(/\\\\/, \"/\");\n\n                // Is response === 'application/json' return the response as JSON, otherwise just return the response.\n                if (contentType && contentType === JSON_CONTENT_TYPE) {\n                    const json = await res.json();\n                    setResponse(json);\n\n                } else {\n                    setResponse(res);\n                }\n            }\n        } catch (error) {\n            setError(error);\n        }\n    };\n    return fetchData();\n};\n\n/**\n * GET HTTP method\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET\n * @param {string} url\n * @param {object | Request} options\n * @returns {{response: Response, error: Error}}\n */\nexport const useGet = (url, options) => {\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        doFetch(url, initializeRequest('GET', options), setResponse, setError);\n    }, []);\n    return {response, error};\n};\n\n/**\n * POST HTTP method\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST\n * @param {string} url\n * @param {object | Request} options\n * @param {object | string} body\n * @returns {{response: Response, error: Error}}\n */\nexport const usePost = (url, options, body) => {\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        doFetch(url, initializeRequest('POST', options, body), setResponse, setError);\n    }, []);\n\n    return { response , error };\n};\n\n/**\n * PATCH HTTP method\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH\n * @param {string} url\n * @param {object | Request} options\n * @param {object | string} body\n * @returns {{response: Response, error: Error}}\n */\nexport const usePatch = (url, options, body) => {\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        doFetch(url, initializeRequest('PATCH', options, body), setResponse, setError);\n    }, []);\n\n    return { response , error };\n};\n\n/**\n * PUT HTTP method\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT\n * @param {string} url\n * @param {object | Request} options\n * @param {object | string} body\n * @returns {{response: Response, error: Error}}\n */\nexport const usePut = (url, options, body) => {\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        doFetch(url, initializeRequest('PUT', options, body), setResponse, setError);\n    }, []);\n\n    return { response , error };\n};\n\n/**\n * DELETE HTTP method\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE\n * @param {string} url\n * @param {object | Request} options\n * @returns {{response: Response, error: Error}}\n */\nexport const useDelete = (url, options) => {\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        doFetch(url, initializeRequest('DELETE', options), setResponse, setError);\n    }, []);\n\n    return { response , error };\n};\n\n/**\n * HEAD HTTP method\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD\n * @param {string} url\n * @param {object | Request} options\n * @returns {{response: Response, error: Error}}\n */\nexport const useHead = (url, options) => {\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        doFetch(url, initializeRequest('HEAD', options), setResponse, setError);\n    }, []);\n\n    return { response , error };\n};\n\n/**\n * OPTIONS HTTP method\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS\n * @param {string} url\n * @param {object | Request} options\n * @returns {{response: Response, error: Error}}\n */\nexport const useOptions = (url, options) => {\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        doFetch(url, initializeRequest('OPTIONS', options), setResponse, setError);\n    }, []);\n\n    return { response , error };\n};\n\n/**\n * CONNECT HTTP method\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT\n * @param {string} url\n * @param {object | Request} options\n * @returns {{response: Response, error: Error}}\n */\nexport const useConnect = (url, options) => {\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        doFetch(url, initializeRequest('CONNECT', options), setResponse, setError);\n    }, []);\n\n    return { response , error };\n};\n\n/**\n * TRACE HTTP method\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/TRACE\n * @param {string} url\n * @param {object | Request} options\n * @returns {{response: Response, error: Error}}\n */\nexport const useTrace = (url, options) => {\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        doFetch(url, initializeRequest('TRACE', options), setResponse, setError);\n    }, []);\n\n    return { response , error };\n};\n","import {useGet} from \"../Providers/Frak\";\nimport React  from \"react\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nconst DogPage = props => {\n    const ImageFetch = props => {\n        const res = useGet('https://dog.ceo/api/breeds/image/random', {});\n        if (!res || !res.response) {\n            return <Spinner animation=\"grow\" size=\"lg\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n        }\n        const imageUrl = res.response.message;\n        return (\n            <div>\n                <img src={imageUrl} alt=\"avatar\" width={400} height=\"auto\" />\n            </div>\n        );\n    };\n\n    return (\n        <>\n            <p>\n                This is an example of what can be done with React calling an API via fetch.\n            </p>\n            <ImageFetch/>\n            <p>\n                Leave this tab and return to refresh the image.\n            </p>\n        </>\n    );\n};\n\n\nexport default DogPage;","import React, {useState} from 'react';\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport TabContent from \"../../styles/tab_content.css\";\nimport AboutPage from \"../About/AboutPage\";\nimport ContributionsPage from \"../Contributions/ContributionsPage\";\nimport FrameworksPage from \"../Frameworks/FrameworksPage\";\nimport DogPage from \"../DogPage/DogPage\";\n\nfunction LandingPage() {\n    const [ activeTabKey, setActiveTabKey ] = useState('about');\n\n    return (\n        <Tabs\n            id=\"landing-page-tabs\"\n            activeKey={activeTabKey}\n            onSelect={(key) => setActiveTabKey(key)}\n        >\n            <Tab\n                className={TabContent}\n                eventKey=\"about\"\n                title=\"About\"\n            >\n                <AboutPage/>\n            </Tab>\n\n            <Tab className={TabContent}\n                eventKey=\"contributions\"\n                title=\"Contributions\">\n                <ContributionsPage/>\n            </Tab>\n\n            <Tab className={TabContent}\n                 eventKey=\"frameworks\"\n                 title=\"Frameworks and Languages\">\n                <FrameworksPage/>\n            </Tab>\n\n            <Tab className={TabContent}\n                 eventKey=\"test\"\n                 title=\"Puppies\"\n            >\n                <DogPage/>\n            </Tab>\n        </Tabs>\n    )\n}\n\nexport default LandingPage;","import React from 'react';\nimport LandingPage from './components/LandingPage/LandingPage';\n\nfunction App() {\n  return (\n      <>\n        <h2 style={{textAlign: \"center\", marginTop: \"15px\"}}>Ryan Jentzsch's Profile</h2>\n        <LandingPage/>\n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}